/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3135.0) */

#ifndef BLE_LNS_H__
#define BLE_LNS_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Location and Navigation event type. */
typedef enum
{ 
    BLE_LNS_LN_FEATURE_EVT_NOTIFICATION_ENABLED,  /**< LN Feature value notification enabled event. */
    BLE_LNS_LN_FEATURE_EVT_NOTIFICATION_DISABLED, /**< LN Feature value notification disabled event. */
    BLE_LNS_LOCATION_AND_SPEED_CHARACTERISTIC_EVT_NOTIFICATION_ENABLED,  /**< Location and Speed Characteristic value notification enabled event. */
    BLE_LNS_LOCATION_AND_SPEED_CHARACTERISTIC_EVT_NOTIFICATION_DISABLED, /**< Location and Speed Characteristic value notification disabled event. */
    BLE_LNS_LOCATION_AND_SPEED_CHARACTERISTIC_EVT_CCCD_WRITE, /**< Location and Speed Characteristic CCCD write event. */
    BLE_LNS_POSITION_QUALITY_EVT_NOTIFICATION_ENABLED,  /**< Position Quality value notification enabled event. */
    BLE_LNS_POSITION_QUALITY_EVT_NOTIFICATION_DISABLED, /**< Position Quality value notification disabled event. */
    BLE_LNS_LN_CONTROL_POINT_EVT_NOTIFICATION_ENABLED,  /**< LN Control Point value notification enabled event. */
    BLE_LNS_LN_CONTROL_POINT_EVT_NOTIFICATION_DISABLED, /**< LN Control Point value notification disabled event. */
    BLE_LNS_LN_CONTROL_POINT_EVT_CCCD_WRITE, /**< LN Control Point CCCD write event. */
    BLE_LNS_LN_CONTROL_POINT_EVT_WRITE, /**< LN Control Point write event. */
    BLE_LNS_NAVIGATION_EVT_NOTIFICATION_ENABLED,  /**< Navigation value notification enabled event. */
    BLE_LNS_NAVIGATION_EVT_NOTIFICATION_DISABLED, /**< Navigation value notification disabled event. */
    BLE_LNS_NAVIGATION_EVT_CCCD_WRITE, /**< Navigation CCCD write event. */
} ble_lns_evt_type_t;

// Forward declaration of the ble_lns_t type.
typedef struct ble_lns_s ble_lns_t;






typedef enum
{ 
    INSTANTANEOUS_SPEED_SUPPORTED_FALSE = 0, 
    INSTANTANEOUS_SPEED_SUPPORTED_TRUE = 1, 
} enum_ln_feature_instantaneous_speed_supported_t;

typedef enum
{ 
    TOTAL_DISTANCE_SUPPORTED_FALSE = 0, 
    TOTAL_DISTANCE_SUPPORTED_TRUE = 1, 
} enum_ln_feature_total_distance_supported_t;

typedef enum
{ 
    LOCATION_SUPPORTED_FALSE = 0, 
    LOCATION_SUPPORTED_TRUE = 1, 
} enum_ln_feature_location_supported_t;

typedef enum
{ 
    ELEVATION_SUPPORTED_FALSE = 0, 
    ELEVATION_SUPPORTED_TRUE = 1, 
} enum_ln_feature_elevation_supported_t;

typedef enum
{ 
    HEADING_SUPPORTED_FALSE = 0, 
    HEADING_SUPPORTED_TRUE = 1, 
} enum_ln_feature_heading_supported_t;

typedef enum
{ 
    ROLLING_TIME_SUPPORTED_FALSE = 0, 
    ROLLING_TIME_SUPPORTED_TRUE = 1, 
} enum_ln_feature_rolling_time_supported_t;

typedef enum
{ 
    UTC_TIME_SUPPORTED_FALSE = 0, 
    UTC_TIME_SUPPORTED_TRUE = 1, 
} enum_ln_feature_utc_time_supported_t;

typedef enum
{ 
    REMAINING_DISTANCE_SUPPORTED_FALSE = 0, 
    REMAINING_DISTANCE_SUPPORTED_TRUE = 1, 
} enum_ln_feature_remaining_distance_supported_t;

typedef enum
{ 
    REMAINING_VERTICAL_DISTANCE_SUPPORTED_FALSE = 0, 
    REMAINING_VERTICAL_DISTANCE_SUPPORTED_TRUE = 1, 
} enum_ln_feature_remaining_vertical_distance_supported_t;

typedef enum
{ 
    ESTIMATED_TIME_OF_ARRIVAL_SUPPORTED_FALSE = 0, 
    ESTIMATED_TIME_OF_ARRIVAL_SUPPORTED_TRUE = 1, 
} enum_ln_feature_estimated_time_of_arrival_supported_t;

typedef enum
{ 
    NUMBER_OF_BEACONS_IN_SOLUTION_SUPPORTED_FALSE = 0, 
    NUMBER_OF_BEACONS_IN_SOLUTION_SUPPORTED_TRUE = 1, 
} enum_ln_feature_number_of_beacons_in_solution_supported_t;

typedef enum
{ 
    NUMBER_OF_BEACONS_IN_VIEW_SUPPORTED_FALSE = 0, 
    NUMBER_OF_BEACONS_IN_VIEW_SUPPORTED_TRUE = 1, 
} enum_ln_feature_number_of_beacons_in_view_supported_t;

typedef enum
{ 
    TIME_TO_FIRST_FIX_SUPPORTED_FALSE = 0, 
    TIME_TO_FIRST_FIX_SUPPORTED_TRUE = 1, 
} enum_ln_feature_time_to_first_fix_supported_t;

typedef enum
{ 
    ESTIMATED_HORIZONTAL_POSITION_ERROR_SUPPORTED_FALSE = 0, 
    ESTIMATED_HORIZONTAL_POSITION_ERROR_SUPPORTED_TRUE = 1, 
} enum_ln_feature_estimated_horizontal_position_error_supported_t;

typedef enum
{ 
    ESTIMATED_VERTICAL_POSITION_ERROR_SUPPORTED_FALSE = 0, 
    ESTIMATED_VERTICAL_POSITION_ERROR_SUPPORTED_TRUE = 1, 
} enum_ln_feature_estimated_vertical_position_error_supported_t;

typedef enum
{ 
    HORIZONTAL_DILUTION_OF_PRECISION_SUPPORTED_FALSE = 0, 
    HORIZONTAL_DILUTION_OF_PRECISION_SUPPORTED_TRUE = 1, 
} enum_ln_feature_horizontal_dilution_of_precision_supported_t;

typedef enum
{ 
    VERTICAL_DILUTION_OF_PRECISION_SUPPORTED_FALSE = 0, 
    VERTICAL_DILUTION_OF_PRECISION_SUPPORTED_TRUE = 1, 
} enum_ln_feature_vertical_dilution_of_precision_supported_t;

typedef enum
{ 
    LOCATION_AND_SPEED_CHARACTERISTIC_CONTENT_MASKING_SUPPORTED_FALSE = 0, 
    LOCATION_AND_SPEED_CHARACTERISTIC_CONTENT_MASKING_SUPPORTED_TRUE = 1, 
} enum_ln_feature_location_and_speed_characteristic_content_masking_supported_t;

typedef enum
{ 
    FIX_RATE_SETTING_SUPPORTED_FALSE = 0, 
    FIX_RATE_SETTING_SUPPORTED_TRUE = 1, 
} enum_ln_feature_fix_rate_setting_supported_t;

typedef enum
{ 
    ELEVATION_SETTING_SUPPORTED_FALSE = 0, 
    ELEVATION_SETTING_SUPPORTED_TRUE = 1, 
} enum_ln_feature_elevation_setting_supported_t;

typedef enum
{ 
    POSITION_STATUS_SUPPORTED_FALSE = 0, 
    POSITION_STATUS_SUPPORTED_TRUE = 1, 
} enum_ln_feature_position_status_supported_t;

typedef struct
{
    enum_ln_feature_instantaneous_speed_supported_t instantaneous_speed_supported; 
    enum_ln_feature_total_distance_supported_t total_distance_supported; 
    enum_ln_feature_location_supported_t location_supported; 
    enum_ln_feature_elevation_supported_t elevation_supported; 
    enum_ln_feature_heading_supported_t heading_supported; 
    enum_ln_feature_rolling_time_supported_t rolling_time_supported; 
    enum_ln_feature_utc_time_supported_t utc_time_supported; 
    enum_ln_feature_remaining_distance_supported_t remaining_distance_supported; 
    enum_ln_feature_remaining_vertical_distance_supported_t remaining_vertical_distance_supported; 
    enum_ln_feature_estimated_time_of_arrival_supported_t estimated_time_of_arrival_supported; 
    enum_ln_feature_number_of_beacons_in_solution_supported_t number_of_beacons_in_solution_supported; 
    enum_ln_feature_number_of_beacons_in_view_supported_t number_of_beacons_in_view_supported; 
    enum_ln_feature_time_to_first_fix_supported_t time_to_first_fix_supported; 
    enum_ln_feature_estimated_horizontal_position_error_supported_t estimated_horizontal_position_error_supported; 
    enum_ln_feature_estimated_vertical_position_error_supported_t estimated_vertical_position_error_supported; 
    enum_ln_feature_horizontal_dilution_of_precision_supported_t horizontal_dilution_of_precision_supported; 
    enum_ln_feature_vertical_dilution_of_precision_supported_t vertical_dilution_of_precision_supported; 
    enum_ln_feature_location_and_speed_characteristic_content_masking_supported_t location_and_speed_characteristic_content_masking_supported; 
    enum_ln_feature_fix_rate_setting_supported_t fix_rate_setting_supported; 
    enum_ln_feature_elevation_setting_supported_t elevation_setting_supported; 
    enum_ln_feature_position_status_supported_t position_status_supported; 
} ln_feature_ln_feature_t; 
typedef enum
{ 
    INSTANTANEOUS_SPEED_PRESENT_FALSE = 0, 
    INSTANTANEOUS_SPEED_PRESENT_TRUE = 1, 
} enum_flags_instantaneous_speed_present_t;

typedef enum
{ 
    TOTAL_DISTANCE_PRESENT_FALSE = 0, 
    TOTAL_DISTANCE_PRESENT_TRUE = 1, 
} enum_flags_total_distance_present_t;

typedef enum
{ 
    LOCATION_PRESENT_FALSE = 0, 
    LOCATION_PRESENT_TRUE = 1, 
} enum_flags_location_present_t;

typedef enum
{ 
    ELEVATION_PRESENT_FALSE = 0, 
    ELEVATION_PRESENT_TRUE = 1, 
} enum_flags_elevation_present_t;

typedef enum
{ 
    HEADING_PRESENT_FALSE = 0, 
    HEADING_PRESENT_TRUE = 1, 
} enum_flags_heading_present_t;

typedef enum
{ 
    ROLLING_TIME_PRESENT_FALSE = 0, 
    ROLLING_TIME_PRESENT_TRUE = 1, 
} enum_flags_rolling_time_present_t;

typedef enum
{ 
    UTC_TIME_PRESENT_FALSE = 0, 
    UTC_TIME_PRESENT_TRUE = 1, 
} enum_flags_utc_time_present_t;

typedef enum
{ 
    POSITION_STATUS_NO_POSITION = 0, 
    POSITION_STATUS_POSITION_OK = 1, 
    POSITION_STATUS_ESTIMATED_POSITION = 2, 
    POSITION_STATUS_LAST_KNOWN_POSITION = 3, 
} enum_flags_position_status_t;

typedef enum
{ 
    SPEED_AND_DISTANCE_FORMAT_2D = 0, 
    SPEED_AND_DISTANCE_FORMAT_3D = 1, 
} enum_flags_speed_and_distance_format_t;

typedef enum
{ 
    ELEVATION_SOURCE_POSITIONING_SYSTEM = 0, 
    ELEVATION_SOURCE_BAROMETRIC_AIR_PRESSURE = 1, 
    ELEVATION_SOURCE_DATABASE_SERVICE__OR_SIMILIAR_ = 2, 
    ELEVATION_SOURCE_OTHER = 3, 
} enum_flags_elevation_source_t;

typedef enum
{ 
    HEADING_SOURCE_HEADING_BASED_ON_MOVEMENT = 0, 
    HEADING_SOURCE_HEADING_BASED_ON_MAGNETIC_COMPASS = 1, 
} enum_flags_heading_source_t;

typedef struct
{
    enum_flags_instantaneous_speed_present_t instantaneous_speed_present; 
    enum_flags_total_distance_present_t total_distance_present; 
    enum_flags_location_present_t location_present; 
    enum_flags_elevation_present_t elevation_present; 
    enum_flags_heading_present_t heading_present; 
    enum_flags_rolling_time_present_t rolling_time_present; 
    enum_flags_utc_time_present_t utc_time_present; 
    enum_flags_position_status_t position_status; 
    enum_flags_speed_and_distance_format_t speed_and_distance_format; 
    enum_flags_elevation_source_t elevation_source; 
    enum_flags_heading_source_t heading_source; 
} location_and_speed_characteristic_flags_t; 
typedef enum
{ 
    NUMBER_OF_BEACONS_IN_SOLUTION_PRESENT_FALSE = 0, 
    NUMBER_OF_BEACONS_IN_SOLUTION_PRESENT_TRUE = 1, 
} enum_flags_number_of_beacons_in_solution_present_t;

typedef enum
{ 
    NUMBER_OF_BEACONS_IN_VIEW_PRESENT_FALSE = 0, 
    NUMBER_OF_BEACONS_IN_VIEW_PRESENT_TRUE = 1, 
} enum_flags_number_of_beacons_in_view_present_t;

typedef enum
{ 
    TIME_TO_FIRST_FIX_PRESENT_FALSE = 0, 
    TIME_TO_FIRST_FIX_PRESENT_TRUE = 1, 
} enum_flags_time_to_first_fix_present_t;

typedef enum
{ 
    EHPE_PRESENT_FALSE = 0, 
    EHPE_PRESENT_TRUE = 1, 
} enum_flags_ehpe_present_t;

typedef enum
{ 
    EVPE_PRESENT_FALSE = 0, 
    EVPE_PRESENT_TRUE = 1, 
} enum_flags_evpe_present_t;

typedef enum
{ 
    HDOP_PRESENT_FALSE = 0, 
    HDOP_PRESENT_TRUE = 1, 
} enum_flags_hdop_present_t;

typedef enum
{ 
    VDOP_PRESENT_FALSE = 0, 
    VDOP_PRESENT_TRUE = 1, 
} enum_flags_vdop_present_t;

typedef enum
{ 
    POSITION_STATUS_NO_POSITION = 0, 
    POSITION_STATUS_POSITION_OK = 1, 
    POSITION_STATUS_ESTIMATED_POSITION = 2, 
    POSITION_STATUS_LAST_KNOWN_POSITION = 3, 
} enum_flags_position_status_t;

typedef struct
{
    enum_flags_number_of_beacons_in_solution_present_t number_of_beacons_in_solution_present; 
    enum_flags_number_of_beacons_in_view_present_t number_of_beacons_in_view_present; 
    enum_flags_time_to_first_fix_present_t time_to_first_fix_present; 
    enum_flags_ehpe_present_t ehpe_present; 
    enum_flags_evpe_present_t evpe_present; 
    enum_flags_hdop_present_t hdop_present; 
    enum_flags_vdop_present_t vdop_present; 
    enum_flags_position_status_t position_status; 
} position_quality_flags_t; 
typedef enum
{ 
    OP_CODES_SET_CUMULATIVE_VALUE = 1, 
    OP_CODES_MASK_LOCATION_AND_SPEED_CHARACTERISTIC_CONTENT = 2, 
    OP_CODES_NAVIGATION_CONTROL = 3, 
    OP_CODES_REQUEST_NUMBER_OF_ROUTES = 4, 
    OP_CODES_REQUEST_NAME_OF_ROUTE = 5, 
    OP_CODES_SELECT_ROUTE = 6, 
    OP_CODES_SET_FIX_RATE = 7, 
    OP_CODES_SET_ELEVATION = 8, 
    OP_CODES_RESPONSE_CODE = 32, 
} enum_op_codes_t; 
typedef struct
{
    enum_op_codes_t op_codes; 
} ln_control_point_op_codes_t; 
typedef enum
{ 
    RESPONSE_VALUE_SUCCESS = 1, 
    RESPONSE_VALUE_OP_CODE_NOT_SUPPORTED = 2, 
    RESPONSE_VALUE_INVALID_PARAMETER = 3, 
    RESPONSE_VALUE_OPERATION_FAILED = 4, 
} enum_response_value_t; 
typedef struct
{
    enum_response_value_t response_value; 
} ln_control_point_response_value_t; 
typedef enum
{ 
    REMAINING_DISTANCE_PRESENT_FALSE = 0, 
    REMAINING_DISTANCE_PRESENT_TRUE = 1, 
} enum_flags_remaining_distance_present_t;

typedef enum
{ 
    REMAINING_VERTICAL_DISTANCE_PRESENT_FALSE = 0, 
    REMAINING_VERTICAL_DISTANCE_PRESENT_TRUE = 1, 
} enum_flags_remaining_vertical_distance_present_t;

typedef enum
{ 
    ESTIMATED_TIME_OF_ARRIVAL_PRESENT_FALSE = 0, 
    ESTIMATED_TIME_OF_ARRIVAL_PRESENT_TRUE = 1, 
} enum_flags_estimated_time_of_arrival_present_t;

typedef enum
{ 
    POSITION_STATUS_NO_POSITION = 0, 
    POSITION_STATUS_POSITION_OK = 1, 
    POSITION_STATUS_ESTIMATED_POSITION = 2, 
    POSITION_STATUS_LAST_KNOWN_POSITION = 3, 
} enum_flags_position_status_t;

typedef enum
{ 
    HEADING_SOURCE_HEADING_BASED_ON_MOVEMENT = 0, 
    HEADING_SOURCE_HEADING_BASED_ON_MAGNETIC_COMPASS = 1, 
} enum_flags_heading_source_t;

typedef enum
{ 
    NAVIGATION_INDICATOR_TYPE_TO_WAYPOINT = 0, 
    NAVIGATION_INDICATOR_TYPE_TO_DESTINATION = 1, 
} enum_flags_navigation_indicator_type_t;

typedef enum
{ 
    WAYPOINT_REACHED_FALSE = 0, 
    WAYPOINT_REACHED_TRUE = 1, 
} enum_flags_waypoint_reached_t;

typedef enum
{ 
    DESTINATION_REACHED_FALSE = 0, 
    DESTINATION_REACHED_TRUE = 1, 
} enum_flags_destination_reached_t;

typedef struct
{
    enum_flags_remaining_distance_present_t remaining_distance_present; 
    enum_flags_remaining_vertical_distance_present_t remaining_vertical_distance_present; 
    enum_flags_estimated_time_of_arrival_present_t estimated_time_of_arrival_present; 
    enum_flags_position_status_t position_status; 
    enum_flags_heading_source_t heading_source; 
    enum_flags_navigation_indicator_type_t navigation_indicator_type; 
    enum_flags_waypoint_reached_t waypoint_reached; 
    enum_flags_destination_reached_t destination_reached; 
} navigation_flags_t; 


/**@brief LN Feature structure. */
typedef struct
{
    ln_feature_ln_feature_t ln_feature;
} ble_lns_ln_feature_t;
/**@brief Location and Speed Characteristic structure. */
typedef struct
{
    location_and_speed_characteristic_flags_t flags;
    uint16_t instantaneous_speed;
    uint24_t total_distance;
    int32_t location___latitude;
    int32_t location___longitude;
    uint8_array_t elevation;
    uint16_t heading;
    uint8_t rolling_time;
    ble_date_time_t utc_time;
} ble_lns_location_and_speed_characteristic_t;
/**@brief Position Quality structure. */
typedef struct
{
    position_quality_flags_t flags;
    uint8_t number_of_beacons_in_solution;
    uint8_t number_of_beacons_in_view;
    uint16_t time_to_first_fix;
    uint32_t ehpe;
    uint32_t evpe;
    uint8_t hdop;
    uint8_t vdop;
} ble_lns_position_quality_t;
/**@brief LN Control Point structure. */
typedef struct
{
    ln_control_point_op_codes_t op_codes;
    uint8_array_t parameter_value;
    uint8_t request_op_code;
    ln_control_point_response_value_t response_value;
    uint8_array_t response_parameter;
} ble_lns_ln_control_point_t;
/**@brief Navigation structure. */
typedef struct
{
    navigation_flags_t flags;
    uint16_t bearing;
    uint16_t heading;
    uint24_t remaining_distance;
    uint8_array_t remaining_vertical_distance;
    ble_date_time_t estimated_time_of_arrival;
} ble_lns_navigation_t;

/**@brief Location and Navigation Service event. */
typedef struct
{
    ble_lns_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_lns_ln_control_point_t ln_control_point; /**< Holds decoded data in Write event handler. */
    } params;
} ble_lns_evt_t;

/**@brief Location and Navigation Service event handler type. */
typedef void (*ble_lns_evt_handler_t) (ble_lns_t * p_lns, ble_lns_evt_t * p_evt);

/**@brief Location and Navigation Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_lns_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Location and Navigation Service. */
    ble_lns_ln_feature_t ble_lns_ln_feature_initial_value; /**< If not NULL, initial value of the LN Feature characteristic. */ 
    ble_lns_location_and_speed_characteristic_t ble_lns_location_and_speed_characteristic_initial_value; /**< If not NULL, initial value of the Location and Speed Characteristic characteristic. */ 
    ble_lns_position_quality_t ble_lns_position_quality_initial_value; /**< If not NULL, initial value of the Position Quality characteristic. */ 
    ble_lns_ln_control_point_t ble_lns_ln_control_point_initial_value; /**< If not NULL, initial value of the LN Control Point characteristic. */ 
    ble_lns_navigation_t ble_lns_navigation_initial_value; /**< If not NULL, initial value of the Navigation characteristic. */ 
} ble_lns_init_t;

/**@brief Location and Navigation Service structure. This contains various status information for the service.*/
struct ble_lns_s
{
    ble_lns_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Location and Navigation Service. */
    uint16_t service_handle; /**< Handle of Location and Navigation Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t ln_feature_handles; /**< Handles related to the LN Feature characteristic. */
    ble_gatts_char_handles_t location_and_speed_characteristic_handles; /**< Handles related to the Location and Speed Characteristic characteristic. */
    ble_gatts_char_handles_t position_quality_handles; /**< Handles related to the Position Quality characteristic. */
    ble_gatts_char_handles_t ln_control_point_handles; /**< Handles related to the LN Control Point characteristic. */
    ble_gatts_char_handles_t navigation_handles; /**< Handles related to the Navigation characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Location and Navigation.
 *
 * @param[out]  p_lns       Location and Navigation Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_lns_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_lns_init(ble_lns_t * p_lns, const ble_lns_init_t * p_lns_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_lns_on_ble_evt(ble_lns_t * p_lns, ble_evt_t * p_ble_evt);

/**@brief Function for setting the LN Feature.
 *
 * @details Sets a new value of the LN Feature characteristic. The new value will be sent
 *          to the client the next time the client reads the LN Feature characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_lns                 Location and Navigation Service structure.
 * @param[in]   p_ln_feature  New LN Feature.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_lns_ln_feature_set(ble_lns_t * p_lns, ble_lns_ln_feature_t * p_ln_feature);

/**@brief Function for sending the Location and Speed Characteristic.
 *
 * @details The application calls this function after having performed a location and speed characteristic.
 *          The location and speed characteristic data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_lns                    Location and Navigation Service structure.
 * @param[in]   p_location_and_speed_characteristic               New location and speed characteristic.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_lns_location_and_speed_characteristic_send(ble_lns_t * p_lns, ble_lns_location_and_speed_characteristic_t * p_location_and_speed_characteristic);

/**@brief Function for setting the Position Quality.
 *
 * @details Sets a new value of the Position Quality characteristic. The new value will be sent
 *          to the client the next time the client reads the Position Quality characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_lns                 Location and Navigation Service structure.
 * @param[in]   p_position_quality  New Position Quality.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_lns_position_quality_set(ble_lns_t * p_lns, ble_lns_position_quality_t * p_position_quality);

/**@brief Function for sending the LN Control Point.
 *
 * @details The application calls this function after having performed a ln control point.
 *          The ln control point data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_lns                    Location and Navigation Service structure.
 * @param[in]   p_ln_control_point               New ln control point.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_lns_ln_control_point_send(ble_lns_t * p_lns, ble_lns_ln_control_point_t * p_ln_control_point);

/**@brief Function for sending the Navigation.
 *
 * @details The application calls this function after having performed a navigation.
 *          The navigation data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_lns                    Location and Navigation Service structure.
 * @param[in]   p_navigation               New navigation.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_lns_navigation_send(ble_lns_t * p_lns, ble_lns_navigation_t * p_navigation);

#endif //_BLE_LNS_H__
